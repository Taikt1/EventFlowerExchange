// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SWP391.EventFlowerExchange.Domain;

#nullable disable

namespace SWP391.EventFlowerExchange.Domain.Migrations
{
    [DbContext(typeof(Swp391eventFlowerExchangePlatformContext))]
    [Migration("20240928034105_AddIdentityAuthentication")]
    partial class AddIdentityAuthentication
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("SWP391.EventFlowerExchange.Domain.ObjectValues.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<double?>("Salary")
                        .HasColumnType("float");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("SWP391.EventFlowerExchange.Domain.ObjectValues.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("cart_id");

                    b.Property<string>("BuyerId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("buyer_id");

                    b.HasKey("CartId", "BuyerId")
                        .HasName("PK__Cart__15583D3220AC18D4");

                    b.HasIndex("BuyerId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("SWP391.EventFlowerExchange.Domain.ObjectValues.CartItem", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("cart_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<string>("BuyerId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("buyer_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("price");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("CartId", "ProductId")
                        .HasName("PK__Cart_Ite__6A850DF879A0A29E");

                    b.HasIndex("ProductId");

                    b.HasIndex("CartId", "BuyerId");

                    b.ToTable("Cart_Item", (string)null);
                });

            modelBuilder.Entity("SWP391.EventFlowerExchange.Domain.ObjectValues.DeliveryLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("log_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("DeliveryPersonId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("delivery_person_id");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("photo_url");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("reason");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.HasKey("LogId")
                        .HasName("PK__Delivery__9E2397E06F1B411E");

                    b.HasIndex("DeliveryPersonId");

                    b.HasIndex("OrderId");

                    b.ToTable("Delivery_Log", (string)null);
                });

            modelBuilder.Entity("SWP391.EventFlowerExchange.Domain.ObjectValues.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notification_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__E059842FE7EA1D64");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("SWP391.EventFlowerExchange.Domain.ObjectValues.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("BuyerId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("buyer_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("datetime")
                        .HasColumnName("delivered_at");

                    b.Property<string>("DeliveryPersonId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("delivery_person_id");

                    b.Property<string>("IssueReport")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("issue_report");

                    b.Property<string>("SellerId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("seller_id");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("total_price");

                    b.HasKey("OrderId")
                        .HasName("PK__Order__465962296172C64F");

                    b.HasIndex("BuyerId");

                    b.HasIndex("DeliveryPersonId");

                    b.HasIndex("SellerId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("SWP391.EventFlowerExchange.Domain.ObjectValues.OrderItem", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("price");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("OrderId", "ProductId")
                        .HasName("PK__Order_It__022945F65230A002");

                    b.HasIndex("ProductId");

                    b.ToTable("Order_Item", (string)null);
                });

            modelBuilder.Entity("SWP391.EventFlowerExchange.Domain.ObjectValues.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("ComboType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("combo_type");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("FreshnessDuration")
                        .HasColumnType("int")
                        .HasColumnName("freshness_duration");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("price");

                    b.Property<string>("ProductName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("product_name");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("SellerId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("seller_id");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.HasKey("ProductId")
                        .HasName("PK__Product__47027DF52E9F0063");

                    b.HasIndex("SellerId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("SWP391.EventFlowerExchange.Domain.ObjectValues.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("request_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<string>("RequestType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("request_type");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("transaction_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("RequestId")
                        .HasName("PK__Request__18D3B90FFFABB483");

                    b.HasIndex("ProductId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("UserId");

                    b.ToTable("Request", (string)null);
                });

            modelBuilder.Entity("SWP391.EventFlowerExchange.Domain.ObjectValues.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("review_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("BuyerId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("buyer_id");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.HasKey("ReviewId")
                        .HasName("PK__Review__60883D90CCF8528A");

                    b.HasIndex("BuyerId");

                    b.HasIndex("OrderId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("SWP391.EventFlowerExchange.Domain.ObjectValues.ShopNotification", b =>
                {
                    b.Property<int>("ShopNotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("shop_notification_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShopNotificationId"));

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("FollowerId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("follower_id");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<string>("SellerId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("seller_id");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.HasKey("ShopNotificationId")
                        .HasName("PK__Shop_Not__F695E7D5C0040F56");

                    b.HasIndex("FollowerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerId");

                    b.ToTable("Shop_Notification", (string)null);
                });

            modelBuilder.Entity("SWP391.EventFlowerExchange.Domain.ObjectValues.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("transaction_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("order_id");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("TransactionCode")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("transaction_code");

                    b.Property<string>("TransactionContent")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("transaction_content");

                    b.Property<int?>("TransactionType")
                        .HasColumnType("int")
                        .HasColumnName("transaction_type");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("TransactionId")
                        .HasName("PK__Transact__85C600AF55D6A98C");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("SWP391.EventFlowerExchange.Domain.ObjectValues.Cart", b =>
                {
                    b.HasOne("SWP391.EventFlowerExchange.Domain.ObjectValues.Account", "Buyer")
                        .WithMany("Carts")
                        .HasForeignKey("BuyerId")
                        .IsRequired()
                        .HasConstraintName("FK__Cart__buyer_id__5AEE82B9");

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("SWP391.EventFlowerExchange.Domain.ObjectValues.CartItem", b =>
                {
                    b.HasOne("SWP391.EventFlowerExchange.Domain.ObjectValues.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__Cart_Item__produ__5DCAEF64");

                    b.HasOne("SWP391.EventFlowerExchange.Domain.ObjectValues.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId", "BuyerId")
                        .HasConstraintName("FK__Cart_Item__5EBF139D");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SWP391.EventFlowerExchange.Domain.ObjectValues.DeliveryLog", b =>
                {
                    b.HasOne("SWP391.EventFlowerExchange.Domain.ObjectValues.Account", "DeliveryPerson")
                        .WithMany("DeliveryLogs")
                        .HasForeignKey("DeliveryPersonId")
                        .HasConstraintName("FK__Delivery___deliv__534D60F1");

                    b.HasOne("SWP391.EventFlowerExchange.Domain.ObjectValues.Order", "Order")
                        .WithMany("DeliveryLogs")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__Delivery___order__52593CB8");

                    b.Navigation("DeliveryPerson");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SWP391.EventFlowerExchange.Domain.ObjectValues.Notification", b =>
                {
                    b.HasOne("SWP391.EventFlowerExchange.Domain.ObjectValues.Account", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Notificat__user___4AB81AF0");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SWP391.EventFlowerExchange.Domain.ObjectValues.Order", b =>
                {
                    b.HasOne("SWP391.EventFlowerExchange.Domain.ObjectValues.Account", "Buyer")
                        .WithMany("OrderBuyers")
                        .HasForeignKey("BuyerId")
                        .HasConstraintName("FK__Order__buyer_id__3E52440B");

                    b.HasOne("SWP391.EventFlowerExchange.Domain.ObjectValues.Account", "DeliveryPerson")
                        .WithMany("OrderDeliveryPeople")
                        .HasForeignKey("DeliveryPersonId")
                        .HasConstraintName("FK__Order__delivery___403A8C7D");

                    b.HasOne("SWP391.EventFlowerExchange.Domain.ObjectValues.Account", "Seller")
                        .WithMany("OrderSellers")
                        .HasForeignKey("SellerId")
                        .HasConstraintName("FK__Order__seller_id__3F466844");

                    b.Navigation("Buyer");

                    b.Navigation("DeliveryPerson");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("SWP391.EventFlowerExchange.Domain.ObjectValues.OrderItem", b =>
                {
                    b.HasOne("SWP391.EventFlowerExchange.Domain.ObjectValues.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__Order_Ite__order__4316F928");

                    b.HasOne("SWP391.EventFlowerExchange.Domain.ObjectValues.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__Order_Ite__produ__440B1D61");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SWP391.EventFlowerExchange.Domain.ObjectValues.Product", b =>
                {
                    b.HasOne("SWP391.EventFlowerExchange.Domain.ObjectValues.Account", "Seller")
                        .WithMany("Products")
                        .HasForeignKey("SellerId")
                        .HasConstraintName("FK__Product__seller___3B75D760");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("SWP391.EventFlowerExchange.Domain.ObjectValues.Request", b =>
                {
                    b.HasOne("SWP391.EventFlowerExchange.Domain.ObjectValues.Product", "Product")
                        .WithMany("Requests")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__Request__product__6383C8BA");

                    b.HasOne("SWP391.EventFlowerExchange.Domain.ObjectValues.Transaction", "Transaction")
                        .WithMany("Requests")
                        .HasForeignKey("TransactionId")
                        .HasConstraintName("FK__Request__transac__628FA481");

                    b.HasOne("SWP391.EventFlowerExchange.Domain.ObjectValues.Account", "User")
                        .WithMany("Requests")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Request__user_id__619B8048");

                    b.Navigation("Product");

                    b.Navigation("Transaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SWP391.EventFlowerExchange.Domain.ObjectValues.Review", b =>
                {
                    b.HasOne("SWP391.EventFlowerExchange.Domain.ObjectValues.Account", "Buyer")
                        .WithMany("Reviews")
                        .HasForeignKey("BuyerId")
                        .HasConstraintName("FK__Review__buyer_id__47DBAE45");

                    b.HasOne("SWP391.EventFlowerExchange.Domain.ObjectValues.Order", "Order")
                        .WithMany("Reviews")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__Review__order_id__46E78A0C");

                    b.Navigation("Buyer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SWP391.EventFlowerExchange.Domain.ObjectValues.ShopNotification", b =>
                {
                    b.HasOne("SWP391.EventFlowerExchange.Domain.ObjectValues.Account", "Follower")
                        .WithMany("ShopNotificationFollowers")
                        .HasForeignKey("FollowerId")
                        .HasConstraintName("FK__Shop_Noti__follo__5629CD9C");

                    b.HasOne("SWP391.EventFlowerExchange.Domain.ObjectValues.Product", "Product")
                        .WithMany("ShopNotifications")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__Shop_Noti__produ__5812160E");

                    b.HasOne("SWP391.EventFlowerExchange.Domain.ObjectValues.Account", "Seller")
                        .WithMany("ShopNotificationSellers")
                        .HasForeignKey("SellerId")
                        .HasConstraintName("FK__Shop_Noti__selle__571DF1D5");

                    b.Navigation("Follower");

                    b.Navigation("Product");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("SWP391.EventFlowerExchange.Domain.ObjectValues.Transaction", b =>
                {
                    b.HasOne("SWP391.EventFlowerExchange.Domain.ObjectValues.Order", "Order")
                        .WithMany("Transactions")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__Transacti__order__4D94879B");

                    b.HasOne("SWP391.EventFlowerExchange.Domain.ObjectValues.Account", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Transacti__user___4F7CD00D");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SWP391.EventFlowerExchange.Domain.ObjectValues.Account", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("DeliveryLogs");

                    b.Navigation("Notifications");

                    b.Navigation("OrderBuyers");

                    b.Navigation("OrderDeliveryPeople");

                    b.Navigation("OrderSellers");

                    b.Navigation("Products");

                    b.Navigation("Requests");

                    b.Navigation("Reviews");

                    b.Navigation("ShopNotificationFollowers");

                    b.Navigation("ShopNotificationSellers");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("SWP391.EventFlowerExchange.Domain.ObjectValues.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("SWP391.EventFlowerExchange.Domain.ObjectValues.Order", b =>
                {
                    b.Navigation("DeliveryLogs");

                    b.Navigation("OrderItems");

                    b.Navigation("Reviews");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("SWP391.EventFlowerExchange.Domain.ObjectValues.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");

                    b.Navigation("Requests");

                    b.Navigation("ShopNotifications");
                });

            modelBuilder.Entity("SWP391.EventFlowerExchange.Domain.ObjectValues.Transaction", b =>
                {
                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
